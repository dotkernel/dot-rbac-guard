<?php

return [

    'dot_authorization' => [

        //define how it will treat non-matching guard rules, allow all by default
        'protection_policy' => \Dot\Rbac\Guard\GuardInterface::POLICY_ALLOW,

        //register custom guards providers here
        'guards_provider_manager' => [],

        //define custom guards here
        'guard_manager' => [],

        //define which guards provider to use, along with its configuration
        //the guards provider should know how to build a list of GuardInterfaces based on its configuration
        'guards_provider' => [

            //the list of guards to use. Custom guards need to be registered in the guard manager first
            \Dot\Rbac\Guard\Provider\ArrayGuardsProvider::class => [

                //the RouteGuard allows you to restrict access to routes based on the user's role
                //to block access to a route, set the roles to an empty array
                \Dot\Rbac\Guard\Route\RouteGuard::class => [
                    'premium' => ['admin'],
                    'login' => ['guest'],
                    'logout' => ['admin', 'user', 'viewer'],
                    'account' => ['admin', 'user'],
                    'home' => ['*'],
                ],
                //the RoutePermissionGuard allows you to restrict access to routes based on permissions
                \Dot\Rbac\Guard\Route\RoutePermissionGuard::class => [
                    'premium' => ['premium'],
                    'account' => ['my-account'],
                    'logout' => ['only-logged'],
                ],

                \Dot\Rbac\Guard\Controller\ControllerGuard::class => [
                   [
                       'route' => 'controller route name',
                       'actions' => [//list of actions to apply, or empty array for all actions],
                       //by default, authorization pass if all permissions are present(AND)
                       'roles' => [//list of roles to allow],
                   ],
                ],

                \Dot\Rbac\Guard\Controller\ControllerPermissionGuard::class => [
                    [
                        'route' => 'controller route name',
                        'actions' => [//list of actions to apply, or empty array for all actions],
                        //by default, authorization pass if all permissions are present(AND)
                        'permissions' => [//list of permissions to allow],
                    ],
                    [
                        'route' => 'controller route name',
                        'actions' => [//list of actions to apply, or empty array for all actions],
                        'permissions' => [
                            //permission can be defined in this way too, for all permission type guards
                            'permissions' => [//list of permissions],
                            'condition' => \Dot\Rbac\Guard\GuardInterface::CONDITION_OR,
                        ]
                    ]
                ],
            ],
        ],

        //enable wanted url appending, used in the redirect on forbidden handler for now
        'allow_redirect_param' => true,

        //the name of the query param appended for the wanted url
        'redirect_query_name' => 'redirect'

        //options for the redirect on forbidden handler
        'redirect_options' => [

            'enable' => false,

            'redirect_route' => [
                'name' => '',
                'params' => []
            ],

        ],

        //overwrite default messages
        //'messages_options' => [],
];
